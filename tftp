// tftp_packet.cpp
bool TFTP_Packet::createRRQWithOptions(char* filename, map<string, string> options) {
    clear();
    addWord(TFTP_OPCODE_READ);
    addString(filename);
    addByte(0);
    addString(TFTP_DEFAULT_TRANSFER_MODE);
    addByte(0);

    for (auto &opt : options) {
        addString((char*)opt.first.c_str());
        addByte(0);
        addString((char*)opt.second.c_str());
        addByte(0);
    }
    return true;
}

// Inside your server receivePacket() logic, after reading RRQ/WRQ and You will need to add helper function readNullTerminatedString().

int pos = strlen(filename) + strlen(TFTP_DEFAULT_TRANSFER_MODE) + 4; 
while (pos < packet_size) {
    string option_name = readNullTerminatedString(pos);
    pos += option_name.length() + 1;
    string option_value = readNullTerminatedString(pos);
    pos += option_value.length() + 1;
    
    cout << "Received Option: " << option_name << " = " << option_value << endl;
    
    // store option & value for that client if needed
}

 // 3. Server replies with OACK (Option Acknowledgement)
// You will create new packet type:

bool TFTP_Packet::createOACK(map<string, string> options) {
    clear();
    addWord(6); // OACK opcode
    for (auto &opt : options) {
        addString((char*)opt.first.c_str());
        addByte(0);
        addString((char*)opt.second.c_str());
        addByte(0);
    }
    return true;
}

// Client parses OACK reply
//Client must handle OACK after sending RRQ/WRQ:


if (received_packet.getWord(0) == 6) { // OACK
   parseOptions(received_packet);
   send ACK(0);
}

